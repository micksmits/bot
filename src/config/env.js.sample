const config = {
    "token": "",
    "prefix": "+",
    "mod": "",
    "admin": "",
    "owner": "",
    "developer": "",
    permLevels: [
        {
            level: 0,
            name: "user", 
            check: () => true
        },

        {
            level: 1,
            name: "mod",
            check: (message) => {
                try {
                    const mod = message.guild.roles.find(r => r.name.toLowerCase() === message.config.mod.toLowerCase());
                    return (mod && message.member.roles.has(mod.id));
                } catch (e) {
                    return false;
                }
            }
        },
  
        {
            level: 2,
            name: "admin", 
            check: (message) => {
                try {
                    const admin = message.guild.roles.find(r => r.name.toLowerCase() === message.config.admin.toLowerCase());
                    return (admin && message.member.roles.has(admin.id));
                } catch (e) {
                    return false;
                }
            }
        },

        {
            level: 3,
            name: "owner",
            check: (message) => {
                try {
                    const owner = message.guild.roles.find(r => r.name.toLowerCase() === message.config.owner.toLowerCase());
                    return (owner && message.member.roles.has(owner.id));
                } catch (e) {
                    return false;
                }
            }
        },

        {
            level: 4,
            name: "developer",
            check: (message) => {
                try {
                    const developer = message.guild.roles.find(r => r.name.toLowerCase() === message.config.developer.toLowerCase());
                    return (developer && message.member.roles.has(developer.id));
                } catch (e) {
                    return false;
                }
            }
        }
    ]
  };
  
  module.exports = config;